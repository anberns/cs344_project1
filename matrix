#!/bin/bash

###############################################################################
# matrix program for project 1
# Aaron Berns
# 1/15/18
###############################################################################

# global variables
matrix1="tempMatrix$$" # holds matrix data for one matrix operations
rows="tempRows$$" # first matrix rows
cols="tempCols$$" # first matrix columns
rows2="tempRows2$$" # second matrix rows
cols2="tempCols2$$" # second matrix columns

# temp files for various uses
temp="temp$$"
temp2="temp2$$"
temp3="temp3$$"

# trap signals 
trap "rm -f {$matrix1,$rows,$cols,$rows2,$cols2,$temp,$temp2,$temp3}; echo 'signal trapped'; exit 1" INT HUP TERM

###############################################################################
# MatrixSource() is called by single matrix operation functions to read from
# stdin or from a file passed as an argument
###############################################################################
MatrixSource() {
	if [ -z "$1" ] # no file passed
	then
		# grab matrix from stdin
		cat > "$matrix1"
	else
		# save data from input file
		cat $1 > "$matrix1"
	fi
}

###############################################################################
# errHand1() is called by single matrix operation functions to check for too
# many arguments, unreadable files and arguments that are not real file names
# help from stack overflow with -f, -z testing flags
###############################################################################
errHand1() {
	if [ -f "$2" ] # second file passed
	then
		echo "too many arguments" 1>&2
		exit 1	
	elif ! [ -r $1 ] # file without read permission
	then
		echo "unreadable file" 1>&2
		exit 1
	elif ! [ -f "$1" ] # first argument is not a valid file name
	then
		if ! [ -z "$1" ] # and first argument is not empty
		then
			echo "invalid file name" 1>&2
			exit 1
		fi
	fi
}

###############################################################################
# dims() calculates and prints the number of rows and columns of a matrix 
###############################################################################
dims() {
	# check for errors
	errHand1 $1 $2
	
	# check for file or stdin
	MatrixSource $1	

	# get rows by counting the lines read
	while read myLine
	do
		(( rows++ ))
	done < $matrix1

	# get columnss by counting elements in a line
	read oneLine < $matrix1
	for i in $oneLine
	do
		(( cols++ ))
	done

	# print to temp file and display
	printf "%s %s\n" $rows $cols >> $temp2
	cat $temp2
}

###############################################################################
# transpose() takes a matrix, cuts each column and makes it a row, transposing
# the matrix
###############################################################################
transpose() {
	
	# get dimensions, check for errors 
	# send output to /dev/null, clear $temp2
	dims $1 > /dev/null
	echo -n > $temp2
		
	#transpose
	i=0
	j=0
	curr=1 # holds the current element to be cut
	next=$(($cols)) # holds number of columns to add to current position 

	# create a single line so that elements can be cut by position
	cat $matrix1 | tr '\n' '\t' > $temp

	# nested loop that cuts the first element from each row and appends to
	# a new row so that first column is new first row, then does the same
	# for second column to the nth column
	while test $i -ne $cols
	do
		while test $j -ne $rows
		do
			cut -f $curr $temp > $temp3 
			cat $temp3 >> $temp2 # add to single column file
			(( j++ ))
			curr=$(($curr + $next)) # skip to next row position
		done
		j=0
		(( i++ ))
		curr=$(($i + 1)) # move to next column and repeat
	done
	cat $temp2 | tr '\n' '\t' > $temp # turn single column into single row
	echo -n "" > $temp2 # output file
	m=1 # count variable
	read anotherLine < $temp # read entire matrix stored in single row
	for k in $anotherLine
	do
		# if count variable m reaches number of rows, which is now columns
		# start a new line
		if [ $m -eq $rows ]
		then
			printf "%s\n" $k >> $temp2
			m=1 # reset count variable
		# tabs between elements
		else
			printf "%s\t" $k >> $temp2
			(( m++ ))
		fi
	done
	cat $temp2
}

###############################################################################
# mean() calculates the mean of each column of a matrix by transposing it and 
# displays it as as a row vector 
###############################################################################
mean() {
		
	# get dimensions, check for errors 
	# send output to /dev/null, clear $temp2
	dims $1 > /dev/null
	echo -n > $temp2

	# transpose
	i=0
	j=0
	curr=1
	next=$(($cols))

	cat $matrix1 | tr '\n' '\t' > $temp
	while test $i -ne $cols
	do
		while test $j -ne $rows
		do
			cut -f $curr $temp > $temp3
			cat $temp3 >> $temp2
			(( j++ ))
			curr=$(($curr + $next))
		done
		j=0
		(( i++ ))
		curr=$(($i + 1))
	done
	
	# turn single column into single row
	cat $temp2 | tr '\n' '\t' > $temp

	# process each column
	m=1 # element count per column 
	sum=0
	tCount=0 # total element count
	echo -n "" > $temp2 #output file
	read aLine < $temp
	for k in $aLine
	do
		(( tCount++ ))
		
		# last element in column
		if [ $m -eq $rows ]
		then
			sum=$(( $sum + $k ))
			
			# if total count equals number of elements, output final mean and '\n'
			if [ $tCount -eq $(( $rows * $cols )) ]
			then
				printf "%s\n" $(( ($sum + ($rows/2)*( ($sum>0)*2 - 1 )) / $rows ))
				 >> $temp2
			# if not final mean value, calculate and output with '\t'
			else
				printf "%s\t" $(( ($sum + ($rows/2)*( ($sum>0)*2 - 1 )) / $rows )) 
				>> $temp2
				# reset sum and element counter
				sum=0
				m=1
			fi
		# continue
		else
			sum=$(( $sum + $k ))
			(( m++ ))
		fi
	done
	cat $temp2
}

###############################################################################
# add() adds the corresponding elements of two matrices with identical 
# dimensions and displays a new matrix with the added values 
###############################################################################
add() {
	# check for file errors
	if [ $# -ne 2 ]
	then
		echo "incorrect number of arguments" 1>&2
		exit 1
	elif ! [ -r $1 ]
	then
		echo "unreadable file" 1>&2
		exit 1
	elif ! [ -r $2 ]
	then
		echo "unreadable file" 1>&2
		exit 1
	elif ! [ -f $1 ]
	then
		echo "1st file name incorrect" 1>&2
		exit 1
	elif ! [ -f $2 ]
	then
		echo "2st file name incorrect" 1>&2
		exit 1
	fi

	# get dimensions
	while read myLine
	do
		(( rows++ ))
	done < $1

	read oneLine < $1
	for i in $oneLine
	do
		(( cols++ ))
	done

	while read myLine2
	do
		(( rows2++ ))
	done < $2

	read oneLine2 < $2
	for i in $oneLine2
	do
		(( cols2++ ))
	done

	# check dimensions
	if [ $rows != $rows2 ] || [ $cols != $cols2 ]
	then
		echo "incompatible dimensions" 1>&2
		exit 1
	fi
	
	# add
	i=1
	count=0 # keeps track of rows processed
	sum=0
	echo -n "" > $temp3 # output file
	while test $count -ne $rows
	do
		# get the first of the decreasing group of rows until all values
		# of both matrices are processed
		cat $1 | tail -n $(( $rows - $count )) | head -n 1 > $temp
		cat $2 | tail -n $(( $rows - $count )) | head -n 1 > $temp2

		# loop through and add corresponding elements
		while test $(( $i -1 )) -ne $cols
		do
			add1=$( cut -f $i $temp )  
			add2=$( cut -f $i $temp2)			
			
			# print added values with tabs if not all elements in row
			# have been processed
			if [ $i -ne $cols ]
			then
				printf "%s\t" $(( $add1 + $add2 )) >> $temp3
				(( i++ ))
			# print last added value and '\n'
			else
				printf "%s\n" $(( $add1 + $add2 )) >> $temp3
				(( i++ ))
			fi
		done
		i=1 # reset element position counter
		(( count++ ))
	done
	cat $temp3
}

###############################################################################
# multiply() takes two matrices and calculates the sum of the dot products of
# each row / column pairing, displaying a new matrix with product sums 
###############################################################################
multiply() {
	# check for file errors
	if [ $# -ne 2 ]
	then
		echo "incorrect number of arguments" 1>&2
		exit 1
	elif ! [ -r $1 ]
	then
		echo "unreadable file" 1>&2
		exit 1
	elif ! [ -r $2 ]
	then
		echo "unreadable file" 1>&2
		exit 1
	elif ! [ -f $1 ]
	then
		echo "1st file name incorrect" 1>&2
		exit 1
	elif ! [ -f $2 ]
	then
		echo "2st file name incorrect" 1>&2
		exit 1
	fi

	# check dimensions
	while read myLine
	do
		(( rows++ ))
	done < $1

	read oneLine < $1
	for i in $oneLine
	do
		(( cols++ ))
	done

	while read myLine
	do
		(( rows2++ ))
	done < $2

	read oneLine < $2
	for i in $oneLine
	do
		(( cols2++ ))
	done

	# number of columns in first matrix must equal number of rows in second
	if [ $cols != $rows2 ]
	then
		echo "incompatible dimensions" 1>&2
		exit 1
	fi
	
	#transpose matrix2 so that multiplication is done line by line
	i=0
	j=0
	curr=1
	next=$(($cols2))

	cat $2 | tr '\n' '\t' > $temp

	while test $i -ne $cols2
	do
		while test $j -ne $rows2
		do
			cut -f $curr $temp > $temp3
			cat $temp3 >> $temp2
			(( j++ ))
			curr=$(($curr + $next))
		done
		j=0
		(( i++ ))
		curr=$(($i + 1))
	done
	cat $temp2 | tr '\n' '\t' > $temp3

	# multiply
	i=1
	j=1
	count=0 # row of matrix 1
	processed=0 # keep track of rows of matrix 2
	sum=0
	echo -n "" > $temp2 # clear output file

	# mutliply and sum each row of matrix 1 with each column of matrix 2
	while test $count -ne $rows
	do
		# get first of unprocessed rows
		cat $1 | tail -n $(( $rows - $count )) | head -n 1 > $temp

		# loop through values multiplying and summing
		while test $(( $j -1 )) -ne $cols2
		do	
			while test $(( $i -1 )) -ne $cols
			do
			
				# get element from matrix 1  
				fact1=$( cut -f $i $temp ) 	

				# get element from matrix 2 which has been transposed
				# into a single line
				# processed holds number of rows completed and represents
				# where in the single line the current row is found
				fact2=$( cut -f $(( $i + ( $processed * $rows2) )) $temp3 )			
				sum=$(( $sum + $fact1 * $fact2 ))
				(( i++ ))
			done
	
			# if not last product sum for row, print with '\t'
			if [ $(( $processed + 1 )) -ne $cols2 ]
			then
				printf "%s\t" $sum >> $temp2
				i=1
				sum=0
				(( processed++ ))
				(( j++ ))
			
			# print '\n' at end of row
			else
				printf "%s\n" $sum >> $temp2
				i=1
				sum=0
				(( processed++ ))
				(( j++ ))
			fi
		done
		
		# reset variables for next iteration
		i=1
		j=1
		processed=0
		(( count++ ))
		sum=0
	done
	cat $temp2
}
	
# check for valid command, call appropriate function if valid
if [ $1 != "dims" ] && [ $1 != "transpose" ] && [ $1 != "mean" ] &&
[ $1 != "add" ] && [ $1 != "multiply" ]
then
	echo "bad command" 1>&2
	exit 1
else
	$1 "${@:2}"
fi

# delete temp files
rm -f {$matrix1,$rows,$cols,$rows2,$cols2,$temp,$temp2,$temp3}

exit 0
